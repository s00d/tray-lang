//
//  tray_langApp.swift
//  tray-lang
//
//  Created by s00d on 01.08.2025.
//

import SwiftUI
import AppKit
import ApplicationServices

@main
struct tray_langApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    var body: some Scene {
        Settings {
            EmptyView()
        }
    }
}

class AppDelegate: NSObject, NSApplicationDelegate {
    var statusItem: NSStatusItem?
    var popover: NSPopover?
    var mainWindow: NSWindow?
    lazy var trayLangManager: TrayLangManager = {
        let manager = TrayLangManager()
        return manager
    }()
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ
        setupStatusItem()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        setupAutoLaunch()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        checkAccessibilityPermissions()
    }
    
    func setupStatusItem() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
        
        if let button = statusItem?.button {
            button.image = NSImage(systemSymbolName: "keyboard", accessibilityDescription: "Tray Lang")
            button.action = #selector(togglePopover)
            button.target = self
        }
        
        popover = NSPopover()
        popover?.contentSize = NSSize(width: 250, height: 300)
        popover?.behavior = .transient
        popover?.contentViewController = NSHostingController(
            rootView: TrayMenuView(trayLangManager: trayLangManager, showMainWindow: showMainWindow)
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        if let window = NSApp.windows.first {
            window.delegate = self
        }
    }
    
    @objc func togglePopover() {
        if let button = statusItem?.button {
            if popover?.isShown == true {
                popover?.performClose(nil)
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º contentViewController –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                popover?.contentViewController = NSHostingController(
                    rootView: TrayMenuView(trayLangManager: trayLangManager, showMainWindow: showMainWindow)
                )
                popover?.show(relativeTo: button.bounds, of: button, preferredEdge: NSRectEdge.minY)
            }
        }
    }
    
    func setupAutoLaunch() {
        let isAutoLaunchEnabled = UserDefaults.standard.bool(forKey: "autoLaunchEnabled")
        
        if isAutoLaunchEnabled {
            trayLangManager.enableAutoLaunch()
        }
    }
    
    func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
        // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞, –∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π
        return false
    }
    
    func applicationWillTerminate(_ notification: Notification) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        trayLangManager.stopMonitoring()
    }
    
    func hideMainWindow() {
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ–∫–æ–Ω, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ")
    }
    
    func checkAccessibilityPermissions() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Accessibility
        let options = [kAXTrustedCheckOptionPrompt.takeUnretainedValue() as NSString: true]
        let accessibilityEnabled = AXIsProcessTrustedWithOptions(options as CFDictionary)
        
        if !accessibilityEnabled {
            // –ï—Å–ª–∏ –ø—Ä–∞–≤–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                self.showAccessibilityAlert()
            }
        }
    }
    
    func showAccessibilityAlert() {
        let alert = NSAlert()
        alert.messageText = "Accessibility Permissions Required"
        alert.informativeText = "Tray Lang needs accessibility permissions to work properly. Please grant permissions in System Preferences and restart the app."
        alert.alertStyle = .warning
        alert.addButton(withTitle: "Open System Preferences")
        alert.addButton(withTitle: "Restart App")
        alert.addButton(withTitle: "Later")
        
        let response = alert.runModal()
        
        switch response {
        case .alertFirstButtonReturn:
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º System Preferences
            NSWorkspace.shared.open(URL(string: "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility")!)
        case .alertSecondButtonReturn:
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            restartApp()
        default:
            break
        }
    }
    
    func restartApp() {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        let task = Process()
        task.launchPath = "/usr/bin/open"
        task.arguments = ["-a", Bundle.main.bundlePath]
        task.launch()
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        NSApp.terminate(nil)
    }
    
    func showMainWindow() {
        print("üîç showMainWindow –≤—ã–∑–≤–∞–Ω–∞")
        NSApp.activate(ignoringOtherApps: true)
        
        if let window = mainWindow {
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ")
            window.makeKeyAndOrderFront(nil)
        } else {
            print("‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
            // –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            let contentView = ContentView()
                .environmentObject(trayLangManager)
            
            let window = NSWindow(
                contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),
                styleMask: [.titled, .closable, .miniaturizable, .resizable],
                backing: .buffered,
                defer: false
            )
            window.title = "Tray Lang"
            window.delegate = self
            window.contentView = NSHostingView(rootView: contentView)
            window.center()
            window.makeKeyAndOrderFront(nil)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ
            mainWindow = window
            print("‚úÖ –ù–æ–≤–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        }
    }
}

// MARK: - NSWindowDelegate
extension AppDelegate: NSWindowDelegate {
    func windowShouldClose(_ sender: NSWindow) -> Bool {
        print("üîç windowShouldClose –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –æ–∫–Ω–∞: \(sender.title)")
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
        sender.orderOut(nil)
        print("‚úÖ –û–∫–Ω–æ —Å–∫—Ä—ã—Ç–æ, —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return false
    }
    
    func windowWillClose(_ notification: Notification) {
        print("üîç windowWillClose –≤—ã–∑–≤–∞–Ω–∞")
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
        if let window = notification.object as? NSWindow, window == mainWindow {
            print("‚ùå –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
            mainWindow = nil
        }
    }
}
