import Foundation
import AppKit
import Carbon
import ApplicationServices
import SwiftUI
import UserNotifications
import ServiceManagement

// MARK: - Key Information Structure
struct KeyInfo {
    let keyCode: Int
    let name: String
    let displayName: String
}

// MARK: - Accessibility Status
enum AccessibilityStatus {
    case unknown
    case granted
    case denied
    case requesting
    
    var description: String {
        switch self {
        case .unknown:
            return "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        case .granted:
            return "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"
        case .denied:
            return "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"
        case .requesting:
            return "–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π..."
        }
    }
    
    var color: Color {
        switch self {
        case .unknown:
            return .orange
        case .granted:
            return .green
        case .denied:
            return .red
        case .requesting:
            return .blue
        }
    }
}

// MARK: - Available Keys
extension TrayLangManager {
    private static var cachedKeyCodes: [KeyInfo]?
    private static var lastCacheTime: Date = Date.distantPast
    private static let cacheTimeout: TimeInterval = 5.0 // 5 —Å–µ–∫—É–Ω–¥
    
    // –ö—ç—à –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥–æ–∫
    private static var cachedLayoutName: String?
    private static var lastLayoutCheck: Date = Date.distantPast
    private static let layoutCacheTimeout: TimeInterval = 2.0 // 2 —Å–µ–∫—É–Ω–¥—ã
    
    // –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–∫
    private static var cachedLayoutAnalysis: [String: [KeyInfo]] = [:]
    private static var lastAnalysisCheck: Date = Date.distantPast
    private static let analysisCacheTimeout: TimeInterval = 3.0 // 3 —Å–µ–∫—É–Ω–¥—ã
    
    static func getAvailableKeyCodes() -> [KeyInfo] {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        let now = Date()
        if let cached = cachedKeyCodes, 
           now.timeIntervalSince(lastCacheTime) < cacheTimeout {
            return cached
        }
        
        var keyInfos: [KeyInfo] = []
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ Carbon API
        if let systemKeys = getSystemKeyCodes() {
            keyInfos.append(contentsOf: systemKeys)
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(systemKeys.count) –∫–ª–∞–≤–∏—à –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö API")
        }
        
        // 2. –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ API –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ –∫–ª–∞–≤–∏—à–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if keyInfos.isEmpty {
            keyInfos = getFallbackKeyCodes()
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã fallback –∫–ª–∞–≤–∏—à–∏")
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ keyCode –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        let sortedKeys = keyInfos.sorted { $0.keyCode < $1.keyCode }
        print("üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∞–≤–∏—à: \(sortedKeys.count)")
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cachedKeyCodes = sortedKeys
        lastCacheTime = now
        
        return sortedKeys
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    static func refreshAvailableKeyCodes() {
        cachedKeyCodes = nil
        lastCacheTime = Date.distantPast
    }
    
    private static func getSystemKeyCodes() -> [KeyInfo]? {
        var keyInfos: [KeyInfo] = []
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        guard let keyboardLayout = TISCopyCurrentKeyboardInputSource()?.takeRetainedValue() else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            return nil
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–∫–µ (–∫—ç—à–∏—Ä—É–µ–º)
        let now = Date()
        let layoutName: String
        
        if let cached = cachedLayoutName, 
           now.timeIntervalSince(lastLayoutCheck) < layoutCacheTimeout {
            layoutName = cached
        } else {
            if let namePtr = TISGetInputSourceProperty(keyboardLayout, kTISPropertyLocalizedName) {
                layoutName = Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
                cachedLayoutName = layoutName
                lastLayoutCheck = now
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∞: \(layoutName)")
            } else {
                layoutName = "Unknown"
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–≤–∏—à–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        if let keyCodeMap = getKeyCodeMapForLayout(keyboardLayout) {
            keyInfos.append(contentsOf: keyCodeMap)
        }
        
        return keyInfos.isEmpty ? nil : keyInfos
    }
    
    private static func getKeyCodeMapForLayout(_ layout: TISInputSource) -> [KeyInfo]? {
        var keyInfos: [KeyInfo] = []
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫—ç—à–∏—Ä—É–µ–º)
        let now = Date()
        let layoutName: String
        
        if let namePtr = TISGetInputSourceProperty(layout, kTISPropertyLocalizedName) {
            layoutName = Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
        } else {
            return nil
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        if let cached = cachedLayoutAnalysis[layoutName],
           now.timeIntervalSince(lastAnalysisCheck) < analysisCacheTimeout {
            return cached
        }
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É: \(layoutName)")
        
        // –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if layoutName.contains("Russian") || layoutName.contains("–†—É—Å—Å–∫–∏–π") {
            // –†—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
            keyInfos.append(contentsOf: getRussianLayoutKeys())
        } else if layoutName.contains("English") || layoutName.contains("US") {
            // –ê–Ω–≥–ª–∏–π—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
            keyInfos.append(contentsOf: getEnglishLayoutKeys())
        } else {
            // –î—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
            keyInfos.append(contentsOf: getGenericLayoutKeys())
        }
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        cachedLayoutAnalysis[layoutName] = keyInfos
        lastAnalysisCheck = now
        
        return keyInfos.isEmpty ? nil : keyInfos
    }
    
    private static func getAdditionalKeysFromSystem(_ layout: TISInputSource) -> [KeyInfo]? {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ Carbon API
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à —á–µ—Ä–µ–∑ UCKeyTranslate
        return nil
    }
    
    private static func getRussianLayoutKeys() -> [KeyInfo] {
        var keys: [KeyInfo] = []
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö keyCode
        
        // –ë—É–∫–≤—ã (–ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
        let russianLetters = ["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–Å", "–ñ", "–ó", "–ò", "–ô", "–ö", "–õ", "–ú", "–ù", "–û", "–ü", "–†", "–°", "–¢", "–£", "–§", "–•", "–¶", "–ß", "–®", "–©", "–™", "–´", "–¨", "–≠", "–Æ", "–Ø"]
        
        // –¶–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã
        let russianSymbols = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "[", "]", "\\", ";", "'", ",", ".", "/"]
        
        // –ü–æ–ª—É—á–∞–µ–º keyCode –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        for letter in russianLetters {
            let keyCode = getSystemKeyCode(for: letter)
            if keyCode != -1 {
                keys.append(KeyInfo(keyCode: keyCode, name: letter, displayName: letter))
            }
        }
        
        for symbol in russianSymbols {
            let keyCode = getSystemKeyCode(for: symbol)
            if keyCode != -1 {
                keys.append(KeyInfo(keyCode: keyCode, name: symbol, displayName: symbol))
            }
        }
        
        return keys
    }
    
    private static func getEnglishLayoutKeys() -> [KeyInfo] {
        var keys: [KeyInfo] = []
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        let englishLetters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
        
        let englishSymbols = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "[", "]", "\\", ";", "'", ",", ".", "/"]
        
        // –ü–æ–ª—É—á–∞–µ–º keyCode –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        for letter in englishLetters {
            let keyCode = getSystemKeyCode(for: letter)
            if keyCode != -1 {
                keys.append(KeyInfo(keyCode: keyCode, name: letter, displayName: letter))
            }
        }
        
        for symbol in englishSymbols {
            let keyCode = getSystemKeyCode(for: symbol)
            if keyCode != -1 {
                keys.append(KeyInfo(keyCode: keyCode, name: symbol, displayName: symbol))
            }
        }
        
        return keys
    }
    
    private static func getGenericLayoutKeys() -> [KeyInfo] {
        var keys: [KeyInfo] = []
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤–æ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö
        let universalKeys = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]
        
        for key in universalKeys {
            let keyCode = getSystemKeyCode(for: key)
            if keyCode != -1 {
                keys.append(KeyInfo(keyCode: keyCode, name: key, displayName: key))
            }
        }
        
        return keys
    }
    
    private static func getSystemKeyCode(for character: String) -> Int {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è keyCode –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        return getFallbackKeyCode(for: character)
    }
    
    private static func getFallbackKeyCode(for character: String) -> Int {
        // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        let keyCodeMap: [String: Int] = [
            // –ë—É–∫–≤—ã
            "A": 0, "S": 1, "D": 2, "F": 3, "H": 4, "G": 5, "Z": 6, "X": 7,
            "C": 8, "V": 9, "B": 11, "Q": 12, "W": 13, "E": 14, "R": 15,
            "Y": 17, "T": 16, "U": 32, "I": 34, "O": 31, "P": 35,
            "L": 37, "J": 38, "K": 40, "N": 45, "M": 46,
            
            // –¶–∏—Ñ—Ä—ã
            "1": 18, "2": 19, "3": 20, "4": 21, "5": 22, "6": 23, "7": 24, "8": 25, "9": 26, "0": 29,
            
            // –°–∏–º–≤–æ–ª—ã
            "-": 27, "=": 24, "[": 33, "]": 30, "\\": 42, ";": 41, "'": 39, ",": 43, ".": 47, "/": 44,
            
            // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (–±–∞–∑–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            "–ê": 0, "–ë": 11, "–í": 9, "–ì": 5, "–î": 2, "–ï": 14, "–Å": 14, "–ñ": 6, "–ó": 8, "–ò": 34,
            "–ô": 34, "–ö": 40, "–õ": 37, "–ú": 46, "–ù": 45, "–û": 31, "–ü": 35, "–†": 15, "–°": 1, "–¢": 16,
            "–£": 32, "–§": 3, "–•": 4, "–¶": 7, "–ß": 39, "–®": 41, "–©": 42, "–™": 43, "–´": 44, "–¨": 47,
            "–≠": 27, "–Æ": 30, "–Ø": 33
        ]
        
        return keyCodeMap[character] ?? -1
    }
    
    private static func getFallbackKeyCodes() -> [KeyInfo] {
        // Fallback - –±–∞–∑–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        let basicKeys: [(Int, String, String)] = [
            (0, "A", "A"), (1, "S", "S"), (2, "D", "D"), (3, "F", "F"),
            (4, "H", "H"), (5, "G", "G"), (6, "Z", "Z"), (7, "X", "X"),
            (8, "C", "C"), (9, "V", "V"), (11, "B", "B"), (12, "Q", "Q"),
            (13, "W", "W"), (14, "E", "E"), (15, "R", "R"), (16, "T", "T"),
            (17, "Y", "Y"), (18, "1", "1"), (19, "2", "2"), (20, "3", "3"),
            (21, "4", "4"), (22, "5", "5"), (23, "6", "6"), (24, "7", "7"),
            (25, "8", "8"), (26, "9", "9"), (27, "0", "0")
        ]
        
        return basicKeys.map { KeyInfo(keyCode: $0.0, name: $0.1, displayName: $0.2) }
    }
    
    static func getAvailableModifiers() -> [(CGEventFlags, String)] {
        return [
            (.maskCommand, "‚åò"),
            (.maskShift, "‚áß"),
            (.maskAlternate, "‚å•"),
            (.maskControl, "‚åÉ")
        ]
    }
}

class TrayLangManager: ObservableObject {
    // MARK: - Published Properties
    @Published var isEnabled: Bool = false
    @Published var currentLayout: String = "US"
    @Published var availableLayouts: [String] = []
    @Published var hotKey: HotKey = HotKey(keyCode: 18, modifiers: [.maskCommand]) // Command+1
    @Published var accessibilityStatus: AccessibilityStatus = .unknown
    
    // MARK: - Private Properties
    private var eventTap: CFMachPort?
    private var runLoopSource: CFRunLoopSource?
    private var keyCaptureEventTap: CFMachPort?
    private var keyCaptureRunLoopSource: CFRunLoopSource?
    @Published var fromToMapping: [String: String] = [
        "–π": "q", "—Ü": "w", "—É": "e", "–∫": "r", "–µ": "t", "–Ω": "y", "–≥": "u", "—à": "i", "—â": "o", "–∑": "p",
        "—Ñ": "a", "—ã": "s", "–≤": "d", "–∞": "f", "–ø": "g", "—Ä": "h", "–æ": "j", "–ª": "k", "–¥": "l",
        "—è": "z", "—á": "x", "—Å": "c", "–º": "v", "–∏": "b", "—Ç": "n", "—å": "m",
        "–ô": "Q", "–¶": "W", "–£": "E", "–ö": "R", "–ï": "T", "–ù": "Y", "–ì": "U", "–®": "I", "–©": "O", "–ó": "P",
        "–§": "A", "–´": "S", "–í": "D", "–ê": "F", "–ü": "G", "–†": "H", "–û": "J", "–õ": "K", "–î": "L",
        "–Ø": "Z", "–ß": "X", "–°": "C", "–ú": "V", "–ò": "B", "–¢": "N", "–¨": "M"
    ]
    private var toFromMapping: [String: String] = [:]
    
    // MARK: - Initialization
    init() {
        setupToFromMapping()
        loadAvailableLayouts()
        updateCurrentLayout()
        loadHotKey()
        updateAccessibilityStatus()
        requestAccessibilityPermissions()
        startMonitoring()
        
        // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
            self.updateCurrentLayout()
        }
        
        // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            self.updateAccessibilityStatus()
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadSymbols()
    }
    
    // MARK: - Accessibility Permissions
    func requestAccessibilityPermissions() {
        accessibilityStatus = .requesting
        
        let accessibilityEnabled = AXIsProcessTrusted()
        
        if !accessibilityEnabled {
            print("‚ö†Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            DispatchQueue.main.async {
                let alert = NSAlert()
                alert.messageText = "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
                alert.informativeText = "–î–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'."
                alert.alertStyle = .warning
                alert.addButton(withTitle: "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∞")
                
                let response = alert.runModal()
                if response == .alertFirstButtonReturn {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if let url = URL(string: "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility") {
                        NSWorkspace.shared.open(url)
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –¥–∏–∞–ª–æ–≥–∞
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    self.updateAccessibilityStatus()
                }
            }
        } else {
            print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            accessibilityStatus = .granted
        }
    }
    
    func updateAccessibilityStatus() {
        let accessibilityEnabled = AXIsProcessTrusted()
        let previousStatus = accessibilityStatus
        accessibilityStatus = accessibilityEnabled ? .granted : .denied
        
        // –ï—Å–ª–∏ –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if accessibilityEnabled && previousStatus != .granted {
            print("‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.startMonitoring()
            }
        }
    }
    
    // MARK: - Setup Methods
    private func setupToFromMapping() {
        for (from, to) in fromToMapping {
            toFromMapping[to] = from
        }
    }
    
    // MARK: - Hot Key Management
    func startMonitoring() {
        guard eventTap == nil else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if !AXIsProcessTrusted() {
            print("‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
            return
        }
        
        print("üîß –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à...")
        
        eventTap = CGEvent.tapCreate(
            tap: .cgSessionEventTap,
            place: .headInsertEventTap,
            options: .defaultTap,
            eventsOfInterest: CGEventMask(1 << CGEventType.keyDown.rawValue),
            callback: { (proxy, type, event, refcon) -> Unmanaged<CGEvent>? in
                guard let refcon = refcon else { return Unmanaged.passRetained(event) }
                
                let manager = Unmanaged<TrayLangManager>.fromOpaque(refcon).takeUnretainedValue()
                
                if manager.handleKeyEvent(event) {
                    // –ï—Å–ª–∏ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
                    return nil
                }
                
                // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
                return Unmanaged.passRetained(event)
            },
            userInfo: Unmanaged.passUnretained(self).toOpaque()
        )
        
        if let tap = eventTap {
            let runLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, tap, 0)
            CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource, .commonModes)
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∑–∞–ø—É—â–µ–Ω")
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å event tap")
        }
    }
    
    func stopMonitoring() {
        if let tap = eventTap {
            CGEvent.tapEnable(tap: tap, enable: false)
            eventTap = nil
            print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        }
    }
    

    
    private func handleKeyEvent(_ event: CGEvent) -> Bool {
        let keyCode = event.getIntegerValueField(.keyboardEventKeycode)
        let flags = event.flags
        
        print("üîç –ö–ª–∞–≤–∏—à–∞: \(keyCode), –§–ª–∞–≥–∏: \(flags.rawValue)")
        print("üéØ –û–∂–∏–¥–∞–µ–º–∞—è –∫–ª–∞–≤–∏—à–∞: \(hotKey.keyCode), –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–ª–∞–≥–∏: \(hotKey.modifiers.map { $0.rawValue })")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        let hasCommand = flags.contains(.maskCommand)
        let hasShift = flags.contains(.maskShift)
        let hasOption = flags.contains(.maskAlternate)
        let hasControl = flags.contains(.maskControl)
        
        print("üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: Command=\(hasCommand), Shift=\(hasShift), Option=\(hasOption), Control=\(hasControl)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        let allModifiersPresent = hotKey.modifiers.allSatisfy { modifier in
            flags.contains(modifier)
        }
        
        print("‚úÖ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: \(allModifiersPresent)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        if keyCode == hotKey.keyCode && allModifiersPresent {
            print("üéØ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
            performLayoutSwitch()
            return true
        }
        
        return false
    }
    
    // MARK: - Key Capture
    func startKeyCapture() {
        guard keyCaptureEventTap == nil else { 
            print("‚ö†Ô∏è –ó–∞—Ö–≤–∞—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return 
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if !AXIsProcessTrusted() {
            print("‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏—à")
            return
        }
        
        print("üîß –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏—à...")
        
        let eventMask = CGEventMask(1 << CGEventType.keyDown.rawValue)
        
        keyCaptureEventTap = CGEvent.tapCreate(
            tap: .cgSessionEventTap,
            place: .headInsertEventTap,
            options: .defaultTap,
            eventsOfInterest: eventMask,
            callback: { (proxy, type, event, refcon) -> Unmanaged<CGEvent>? in
                guard let refcon = refcon else { 
                    print("‚ùå –ù–µ—Ç refcon –≤ callback –∑–∞—Ö–≤–∞—Ç–∞")
                    return Unmanaged.passRetained(event) 
                }
                
                let manager = Unmanaged<TrayLangManager>.fromOpaque(refcon).takeUnretainedValue()
                return manager.handleKeyCaptureEvent(proxy: proxy, type: type, event: event)
            },
            userInfo: Unmanaged.passUnretained(self).toOpaque()
        )
        
        if let keyCaptureEventTap = keyCaptureEventTap {
            keyCaptureRunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, keyCaptureEventTap, 0)
            CFRunLoopAddSource(CFRunLoopGetCurrent(), keyCaptureRunLoopSource, .commonModes)
            CGEvent.tapEnable(tap: keyCaptureEventTap, enable: true)
            print("‚úÖ –ó–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏—à –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å event tap –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞")
        }
    }
    
    func stopKeyCapture() {
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏—à...")
        
        if let keyCaptureEventTap = keyCaptureEventTap {
            CGEvent.tapEnable(tap: keyCaptureEventTap, enable: false)
            print("‚úÖ Event tap –æ—Ç–∫–ª—é—á–µ–Ω")
        }
        
        if let keyCaptureRunLoopSource = keyCaptureRunLoopSource {
            CFRunLoopRemoveSource(CFRunLoopGetCurrent(), keyCaptureRunLoopSource, .commonModes)
            print("‚úÖ Run loop source —É–¥–∞–ª–µ–Ω")
        }
        
        keyCaptureEventTap = nil
        keyCaptureRunLoopSource = nil
        print("üõë –ó–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    private func handleKeyCaptureEvent(proxy: CGEventTapProxy, type: CGEventType, event: CGEvent) -> Unmanaged<CGEvent>? {
        let keyCode = event.getIntegerValueField(.keyboardEventKeycode)
        let flags = event.flags
        
        print("üîç –ó–∞—Ö–≤–∞—Ç: –ö–ª–∞–≤–∏—à–∞ \(keyCode), –§–ª–∞–≥–∏ \(flags.rawValue)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
        guard type == .keyDown else {
            print("‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ \(type.rawValue)")
            return Unmanaged.passRetained(event)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ keyCode –≤–∞–ª–∏–¥–Ω—ã–π
        guard keyCode > 0 else {
            print("‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å keyCode = 0")
            return Unmanaged.passRetained(event)
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        var modifiers: [CGEventFlags] = []
        if flags.contains(.maskCommand) { 
            modifiers.append(.maskCommand)
            print("  - Command")
        }
        if flags.contains(.maskShift) { 
            modifiers.append(.maskShift)
            print("  - Shift")
        }
        if flags.contains(.maskAlternate) { 
            modifiers.append(.maskAlternate)
            print("  - Option")
        }
        if flags.contains(.maskControl) { 
            modifiers.append(.maskControl)
            print("  - Control")
        }
        
        print("üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: \(modifiers.map { $0.rawValue })")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        DispatchQueue.main.async {
            NotificationCenter.default.post(
                name: .keyCaptured,
                object: nil,
                userInfo: [
                    "keyCode": keyCode,
                    "modifiers": modifiers
                ]
            )
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Ö–≤–∞—Ç–µ –∫–ª–∞–≤–∏—à–∏: \(keyCode)")
        }
        
        return nil // –ü–æ–≥–ª–æ—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    }
    
    // MARK: - Layout Management
    private func getCurrentLayoutName() -> String {
        if let currentLayout = TISCopyCurrentKeyboardInputSource()?.takeRetainedValue(),
           let namePtr = TISGetInputSourceProperty(currentLayout, kTISPropertyLocalizedName) {
            return Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
        }
        return "Unknown"
    }
    
    private func updateCurrentLayout() {
        if let currentLayout = TISCopyCurrentKeyboardInputSource()?.takeRetainedValue() {
            if let namePtr = TISGetInputSourceProperty(currentLayout, kTISPropertyLocalizedName) {
                let name = Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
                self.currentLayout = name
            }
        }
    }
    
    private func loadAvailableLayouts() {
        if let inputSources = TISCreateInputSourceList(nil, false)?.takeRetainedValue() as? [TISInputSource] {
            availableLayouts = inputSources.compactMap { inputSource in
                if let namePtr = TISGetInputSourceProperty(inputSource, kTISPropertyLocalizedName) {
                    let name = Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
                    return name
                }
                return nil
            }
        }
    }
    
    func switchToLayout(_ layoutName: String) {
        let inputSources = TISCreateInputSourceList(nil, false).takeRetainedValue() as! [TISInputSource]
        
        for source in inputSources {
            if let namePtr = TISGetInputSourceProperty(source, kTISPropertyLocalizedName) {
                let name = Unmanaged<CFString>.fromOpaque(namePtr).takeRetainedValue() as String
                if name == layoutName {
                    TISSelectInputSource(source)
                    currentLayout = layoutName
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.05) {
                        self.updateCurrentLayout()
                    }
                    break
                }
            }
        }
    }
    
    // MARK: - Text Transformation
    func transformText(_ text: String, fromRussian: Bool) -> String {
        var result = ""
        
        for char in text {
            let charString = String(char)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
            if char.isLetter {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –æ—Ç–¥–µ–ª—å–Ω–æ
                let isRussianChar = isRussianCharacter(charString)
                let isEnglishChar = isEnglishCharacter(charString)
                
                if isRussianChar {
                    // –†—É—Å—Å–∫–∞—è –±—É–∫–≤–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫—É—é
                    if let mapped = fromToMapping[charString] {
                        result += mapped
                    } else {
                        result += charString // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                    }
                } else if isEnglishChar {
                    // –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –±—É–∫–≤–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É—Å—Å–∫—É—é
                    if let mapped = toFromMapping[charString] {
                        result += mapped
                    } else {
                        result += charString // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                    }
                } else {
                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—É–∫–≤–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    result += charString
                }
            } else {
                // –ù–µ –±—É–∫–≤–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                result += charString
            }
        }
        
        return result
    }
    
    private func isRussianCharacter(_ char: String) -> Bool {
        let lowerChar = char.lowercased()
        return fromToMapping.keys.contains(lowerChar)
    }
    
    private func isEnglishCharacter(_ char: String) -> Bool {
        let lowerChar = char.lowercased()
        return toFromMapping.keys.contains(lowerChar)
    }
    
    private func determineTextLanguage(_ text: String) -> Bool {
        // –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        let textChars = Set(text.lowercased().map { String($0) })
        let russianCount = textChars.intersection(fromToMapping.keys).count
        let englishCount = textChars.intersection(toFromMapping.keys).count
        
        return russianCount > englishCount
    }
    
    // –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    func detectLanguage(_ text: String) -> Bool {
        return determineTextLanguage(text)
    }
    
    private func transformText(_ text: String) -> String {
        // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        return transformText(text, fromRussian: false) // fromRussian –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    }
    
    private func getSelectedText() -> String? {
        print("üîç –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Accessibility API...")
        
        guard let frontmostApp = NSWorkspace.shared.frontmostApplication else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return nil
        }
        
        let appElement = AXUIElementCreateApplication(frontmostApp.processIdentifier)
        
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXSelectedTextAttribute
        if let text = getSelectedTextViaAttribute(appElement) {
            return text
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXValueAttribute
        if let text = getSelectedTextViaValue(appElement) {
            return text
        }
        
        // –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AppleScript –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if let text = getSelectedTextViaHotkeys() {
            return text
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
        return nil
    }
    
    private func getSelectedTextViaAttribute(_ appElement: AXUIElement) -> String? {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç")
            return nil
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        var selectedText: CFTypeRef?
        let textResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, &selectedText)
        
        if textResult == .success, let text = selectedText as? String, !text.isEmpty {
            print("üìã –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXSelectedTextAttribute: \(text)")
            return text
        }
        
        return nil
    }
    
    private func getSelectedTextViaValue(_ appElement: AXUIElement) -> String? {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            return nil
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        var value: CFTypeRef?
        let valueResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXValueAttribute as CFString, &value)
        
        if valueResult == .success, let text = value as? String, !text.isEmpty {
            print("üìã –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXValueAttribute: \(text)")
            return text
        }
        
        return nil
    }
    

    
    private func replaceSelectedText(with newText: String) {
        print("üìù –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞: \(newText)")
        
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
        if replaceTextWithImprovedLogic(newText) {
            return
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Accessibility API (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
        if replaceTextViaAccessibility(newText) {
            return
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
    }
    
    private func replaceTextViaAccessibility(_ newText: String) -> Bool {
        guard let frontmostApp = NSWorkspace.shared.frontmostApplication else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return false
        }
        
        let appElement = AXUIElementCreateApplication(frontmostApp.processIdentifier)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç")
            return false
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        var currentText: CFTypeRef?
        let getResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXValueAttribute as CFString, &currentText)
        
        if getResult == .success, let text = currentText as? String {
            print("üìã –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: \(text)")
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            var selectedText: CFTypeRef?
            let selectedResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, &selectedText)
            
            if selectedResult == .success, let selected = selectedText as? String, !selected.isEmpty {
                print("üìã –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(selected)")
                
                // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π
                let setResult = AXUIElementSetAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, newText as CFString)
                
                if setResult == .success {
                    print("‚úÖ –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Accessibility API")
                    return true
                }
            }
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Accessibility API")
        return false
    }
    

    
    private func getSelectedTextViaHotkeys() -> String? {
        print("üìã –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AppleScript...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AppleScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
        let script = """
        tell application "System Events"
            set originalClipboard to the clipboard
            try
                -- –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Cmd+C)
                key code 8 using {command down}
                delay 0.1
                set selectedText to the clipboard
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                set the clipboard to originalClipboard
                return selectedText
            on error
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                set the clipboard to originalClipboard
                return ""
            end try
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        
        do {
            try task.run()
            task.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) {
                if !output.isEmpty && output != "error" {
                    print("üìã –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AppleScript: \(output)")
                    return output
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AppleScript: \(error)")
        }
        
        return nil
    }
    

    
    // MARK: - Improved Text Replacement
    private func replaceTextWithImprovedLogic(_ newText: String) -> Bool {
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AppleScript –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ —Å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã–¥–µ–ª–µ–Ω–∏—è
        let script = """
        tell application "System Events"
            set originalClipboard to the clipboard
            try
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                key code 8 using {command down}
                delay 0.1
                set selectedText to the clipboard
                
                if selectedText is not equal to originalClipboard then
                    -- –ï—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
                    set the clipboard to "\(newText)"
                    delay 0.1
                    key code 9 using {command down}
                    delay 0.1
                    set the clipboard to originalClipboard
                    return "success"
                else
                    -- –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
                    set the clipboard to "\(newText)"
                    delay 0.1
                    key code 9 using {command down}
                    delay 0.1
                    set the clipboard to originalClipboard
                    return "success"
                end if
            on error
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                set the clipboard to originalClipboard
                return "error"
            end try
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        
        do {
            try task.run()
            task.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) {
                if output == "success" {
                    print("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
                    return true
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AppleScript: \(error)")
        }
        
        return false
    }
    
    private func transformSelectedText() -> String? {
        guard let selectedText = getSelectedText(), !selectedText.isEmpty else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            return nil
        }
        
        print("üìã –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(selectedText)")
        
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        let transformedText = transformText(selectedText)
        print("üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(transformedText)")
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        replaceSelectedText(with: transformedText)
        
        return transformedText
    }
    
    // MARK: - Main Action
    func performLayoutSwitch() {
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if !AXIsProcessTrusted() {
            print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
            requestAccessibilityPermissions()
            return
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if let frontmostApp = NSWorkspace.shared.frontmostApplication {
            print("üì± –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: \(frontmostApp.localizedName ?? "Unknown") (PID: \(frontmostApp.processIdentifier))")
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        guard let selectedText = getSelectedText(), !selectedText.isEmpty else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–∞—Ç—å –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É —Å–Ω–æ–≤–∞")
            return
        }
        
        print("üìã –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(selectedText)")
        
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        let transformedText = transformText(selectedText)
        print("üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(transformedText)")
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        replaceSelectedText(with: transformedText)
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        switchKeyboardLayout()
        
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    }
    
    private func switchKeyboardLayout() {
        let currentLayout = getCurrentLayoutName()
        print("üîç –¢–µ–∫—É—â–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞: \(currentLayout)")
        
        if currentLayout.contains("Russian") || currentLayout.contains("–†—É—Å—Å–∫–∞—è") {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é
            if let englishLayout = availableLayouts.first(where: { $0.contains("ABC") || $0.contains("English") }) {
                switchToLayout(englishLayout)
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É")
            }
        } else {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä—É—Å—Å–∫—É—é
            if let russianLayout = availableLayouts.first(where: { $0.contains("Russian") || $0.contains("–†—É—Å—Å–∫–∞—è") }) {
                switchToLayout(russianLayout)
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É")
            }
        }
    }
    
    // MARK: - Notifications
    func showNotification(title: String, body: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = UNNotificationSound.default
        
        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            }
        }
    }
    
    // MARK: - Persistence
    func saveHotKey() {
        if let data = try? JSONEncoder().encode(hotKey) {
            UserDefaults.standard.set(data, forKey: "savedHotKey")
        }
    }
    
    func loadHotKey() {
        if let data = UserDefaults.standard.data(forKey: "savedHotKey"),
           let savedHotKey = try? JSONDecoder().decode(HotKey.self, from: data) {
            DispatchQueue.main.async {
                self.hotKey = savedHotKey
            }
        }
    }
    
    // MARK: - Auto Launch
    func enableAutoLaunch() {
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π SMAppService
            let appService = SMAppService.mainApp
            try appService.register()
            
            UserDefaults.standard.set(true, forKey: "autoLaunchEnabled")
            print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ SMAppService")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: \(error)")
        }
    }
    
    func disableAutoLaunch() {
        do {
            // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ SMAppService
            let appService = SMAppService.mainApp
            try appService.unregister()
            
            UserDefaults.standard.set(false, forKey: "autoLaunchEnabled")
            print("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: \(error)")
        }
    }
    
    func isAutoLaunchEnabled() -> Bool {
        do {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ SMAppService
            let appService = SMAppService.mainApp
            return appService.status == .enabled
        } catch {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º UserDefaults
            return UserDefaults.standard.bool(forKey: "autoLaunchEnabled")
        }
    }

    func addSymbolMapping(from: String, to: String) {
        let lowerFrom = from.lowercased()
        let lowerTo = to.lowercased()
        fromToMapping[lowerFrom] = lowerTo
        toFromMapping[lowerTo] = lowerFrom
    }
    
    func updateSymbolMapping(from: String, to: String) {
        let lowerFrom = from.lowercased()
        let lowerTo = to.lowercased()
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        fromToMapping.removeValue(forKey: lowerFrom)
        toFromMapping.removeValue(forKey: lowerTo)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        fromToMapping[lowerFrom] = lowerTo
        toFromMapping[lowerTo] = lowerFrom
        saveSymbols()
    }
    
    func removeSymbolMapping(from: String) {
        let lowerFrom = from.lowercased()
        fromToMapping.removeValue(forKey: lowerFrom)
        saveSymbols()
    }
    
    private func saveSymbols() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        if let data = try? JSONEncoder().encode(fromToMapping) {
            UserDefaults.standard.set(data, forKey: "fromToMapping")
        }
        if let data = try? JSONEncoder().encode(toFromMapping) {
            UserDefaults.standard.set(data, forKey: "toFromMapping")
        }
    }
    
    private func loadSymbols() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
        if let data = UserDefaults.standard.data(forKey: "fromToMapping"),
           let mapping = try? JSONDecoder().decode([String: String].self, from: data) {
            fromToMapping = mapping
        }
        if let data = UserDefaults.standard.data(forKey: "toFromMapping"),
           let mapping = try? JSONDecoder().decode([String: String].self, from: data) {
            toFromMapping = mapping
        }
    }
}

// MARK: - HotKey Structure
struct HotKey: Codable {
    let keyCode: Int
    let modifiers: [CGEventFlags]
    
    var description: String {
        let modifierString = modifiers.map { flag in
            switch flag {
            case .maskCommand: return "‚åò"
            case .maskShift: return "‚áß"
            case .maskAlternate: return "‚å•"
            case .maskControl: return "‚åÉ"
            default: return ""
            }
        }.joined()
        
        let keyString = getKeyName(for: keyCode)
        return "\(modifierString)\(keyString)"
    }
    
    private func getKeyName(for keyCode: Int) -> String {
        return TrayLangManager.getAvailableKeyCodes().first { $0.keyCode == keyCode }?.name ?? "?"
    }
    
    enum CodingKeys: String, CodingKey {
        case keyCode
        case modifiers
    }
    
    init(keyCode: Int, modifiers: [CGEventFlags]) {
        self.keyCode = keyCode
        self.modifiers = modifiers
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        keyCode = try container.decode(Int.self, forKey: .keyCode)
        let modifierRawValues = try container.decode([UInt64].self, forKey: .modifiers)
        modifiers = modifierRawValues.map { CGEventFlags(rawValue: $0) }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(keyCode, forKey: .keyCode)
        let modifierRawValues = modifiers.map { $0.rawValue }
        try container.encode(modifierRawValues, forKey: .modifiers)
    }
}

// MARK: - Notification Extension
extension Notification.Name {
    static let hotKeyPressed = Notification.Name("hotKeyPressed")
    static let keyCaptured = Notification.Name("keyCaptured")
}