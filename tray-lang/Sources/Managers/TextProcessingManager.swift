import Foundation
import AppKit
import ApplicationServices

// MARK: - Text Processing Manager
class TextProcessingManager: ObservableObject {
    private let textTransformer: TextTransformer
    private let keyboardLayoutManager: KeyboardLayoutManager
    
    init(textTransformer: TextTransformer, keyboardLayoutManager: KeyboardLayoutManager) {
        self.textTransformer = textTransformer
        self.keyboardLayoutManager = keyboardLayoutManager
    }
    
    // MARK: - Text Processing
    func processSelectedText() {
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏...")
        
        guard let selectedText = getSelectedText() else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            return
        }
        
        let transformedText = textTransformer.transformText(selectedText)
        print("üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(transformedText)")
        
        if replaceSelectedText(with: transformedText) {
            print("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫")
            switchToNextLayout()
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç")
        }
    }
    
    // MARK: - Text Retrieval
    private func getSelectedText() -> String? {
        print("üîç === –ù–ê–ß–ê–õ–û –ü–û–õ–£–ß–ï–ù–ò–Ø –í–´–î–ï–õ–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê ===")
        
        guard let frontmostApp = NSWorkspace.shared.frontmostApplication else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return nil
        }
        
        print("üì± –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: \(frontmostApp.localizedName ?? "Unknown") (PID: \(frontmostApp.processIdentifier))")
        let appElement = AXUIElementCreateApplication(frontmostApp.processIdentifier)
        
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXSelectedTextAttribute
        print("üîç –ú–µ—Ç–æ–¥ 1: kAXSelectedTextAttribute")
        do {
            if let text = try getSelectedTextViaAttribute(appElement) {
                print("‚úÖ –ú–µ—Ç–æ–¥ 1 –£–°–ü–ï–®–ï–ù: \(text)")
                return text
            }
        } catch {
            print("‚ùå –ú–µ—Ç–æ–¥ 1 –ü–†–û–í–ê–õ–ï–ù: \(error)")
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ kAXValueAttribute
        print("üîç –ú–µ—Ç–æ–¥ 2: kAXValueAttribute")
        do {
            if let text = try getSelectedTextViaValue(appElement) {
                print("‚úÖ –ú–µ—Ç–æ–¥ 2 –£–°–ü–ï–®–ï–ù: \(text)")
                return text
            }
        } catch {
            print("‚ùå –ú–µ—Ç–æ–¥ 2 –ü–†–û–í–ê–õ–ï–ù: \(error)")
        }
        
        // –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AppleScript –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        print("üîç –ú–µ—Ç–æ–¥ 3: AppleScript + Hotkeys")
        do {
            if let text = try getSelectedTextViaHotkeys() {
                print("‚úÖ –ú–µ—Ç–æ–¥ 3 –£–°–ü–ï–®–ï–ù: \(text)")
                return text
            }
        } catch {
            print("‚ùå –ú–µ—Ç–æ–¥ 3 –ü–†–û–í–ê–õ–ï–ù: \(error)")
        }
        
        print("‚ùå === –í–°–ï –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –ü–†–û–í–ê–õ–ï–ù–´ ===")
        return nil
    }
    
    private func getSelectedTextViaAttribute(_ appElement: AXUIElement) throws -> String? {
        print("  üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç...")
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result))")
            throw TrayLangError.textRetrievalFailed
        }
        
        print("  ‚úÖ –§–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω")
        var selectedText: CFTypeRef?
        let textResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, &selectedText)
        
        print("  üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è kAXSelectedTextAttribute: \(textResult)")
        
        if textResult == .success, let text = selectedText as? String, !text.isEmpty {
            print("  ‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ kAXSelectedTextAttribute: '\(text)'")
            return text
        } else {
            print("  ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(textResult), —Ç–µ–∫—Å—Ç: \(selectedText != nil ? "present" : "nil"))")
        }
        
        return nil
    }
    
    private func getSelectedTextViaValue(_ appElement: AXUIElement) throws -> String? {
        print("  üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è Value...")
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è Value")
            return nil
        }
        
        print("  ‚úÖ –§–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è Value")
        var value: CFTypeRef?
        let valueResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXValueAttribute as CFString, &value)
        
        print("  üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è kAXValueAttribute: \(valueResult)")
        
        if valueResult == .success, let text = value as? String, !text.isEmpty {
            print("  ‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ kAXValueAttribute: '\(text)'")
            return text
        } else {
            print("  ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Value (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(valueResult), –∑–Ω–∞—á–µ–Ω–∏–µ: \(value != nil ? "present" : "nil"))")
        }
        
        return nil
    }
    
    private func getSelectedTextViaHotkeys() throws -> String? {
        print("  üîç –í—ã–ø–æ–ª–Ω—è–µ–º AppleScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AppleScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
        let script = """
        tell application "System Events"
            set originalClipboard to the clipboard
            try
                -- –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Cmd+C)
                key code 8 using {command down}
                delay 0.1
                set selectedText to the clipboard
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                set the clipboard to originalClipboard
                return selectedText
            on error
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                set the clipboard to originalClipboard
                return ""
            end try
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        
        do {
            try task.run()
            task.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) {
                if !output.isEmpty && output != "error" {
                    print("  ‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ AppleScript: '\(output)'")
                    return output
                } else {
                    print("  ‚ùå AppleScript –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫—É: '\(output)'")
                }
            }
        } catch {
            print("  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AppleScript: \(error)")
            throw error
        }
        
        return nil
    }
    
    // MARK: - Text Replacement
    private func replaceSelectedText(with newText: String) -> Bool {
        print("üìù === –ù–ê–ß–ê–õ–û –ó–ê–ú–ï–ù–´ –¢–ï–ö–°–¢–ê: '\(newText)' ===")
        
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Accessibility API (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
        print("üîç –ú–µ—Ç–æ–¥ 1: Accessibility API")
        if replaceTextViaAccessibility(newText) {
            print("‚úÖ –ú–µ—Ç–æ–¥ 1 –ó–ê–ú–ï–ù–´ –£–°–ü–ï–®–ï–ù")
            return true
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
        print("üîç –ú–µ—Ç–æ–¥ 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å AppleScript")
        if replaceTextWithImprovedLogic(newText) {
            print("‚úÖ –ú–µ—Ç–æ–¥ 2 –ó–ê–ú–ï–ù–´ –£–°–ü–ï–®–ï–ù")
            return true
        }
        
        print("‚ùå === –í–°–ï –ú–ï–¢–û–î–´ –ó–ê–ú–ï–ù–´ –¢–ï–ö–°–¢–ê –ü–†–û–í–ê–õ–ï–ù–´ ===")
        return false
    }
    
    private func switchToNextLayout() {
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
        keyboardLayoutManager.switchToNextLayout()
    }
    
    private func replaceTextWithImprovedLogic(_ newText: String) -> Bool {
        print("  üîç –í—ã–ø–æ–ª–Ω—è–µ–º AppleScript –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞...")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AppleScript –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        let script = """
        tell application "System Events"
            set originalClipboard to the clipboard
            try
                -- –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                key code 8 using {command down}
                delay 0.1
                set selectedText to the clipboard
                
                -- –ü–æ–º–µ—â–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                set the clipboard to "\(newText)"
                delay 0.1
                
                -- –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                key code 9 using {command down}
                delay 0.1
                
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                set the clipboard to originalClipboard
                return "success"
            on error errMsg
                -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                set the clipboard to originalClipboard
                return "error: " & errMsg
            end try
        end tell
        """
        
        let task = Process()
        task.launchPath = "/usr/bin/osascript"
        task.arguments = ["-e", script]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        
        do {
            try task.run()
            task.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) {
                if output.hasPrefix("success") {
                    print("  ‚úÖ AppleScript —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    return true
                } else {
                    print("  ‚ùå AppleScript –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: '\(output)'")
                }
            }
        } catch {
            print("  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AppleScript: \(error)")
        }
        
        return false
    }
    
    private func replaceTextViaAccessibility(_ newText: String) -> Bool {
        print("  üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ Accessibility API...")
        
        guard let frontmostApp = NSWorkspace.shared.frontmostApplication else {
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return false
        }
        
        let appElement = AXUIElementCreateApplication(frontmostApp.processIdentifier)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        var focusedElement: CFTypeRef?
        let result = AXUIElementCopyAttributeValue(appElement, kAXFocusedUIElementAttribute as CFString, &focusedElement)
        
        guard result == .success, let focusedElement = focusedElement else {
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result))")
            return false
        }
        
        print("  ‚úÖ –§–æ–∫—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω")
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        var currentText: CFTypeRef?
        let getResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXValueAttribute as CFString, &currentText)
        
        print("  üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: \(getResult)")
        
        if getResult == .success, let text = currentText as? String {
            print("  üìã –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: '\(text)'")
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            var selectedText: CFTypeRef?
            let selectedResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, &selectedText)
            
            print("  üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: \(selectedResult)")
            
            if selectedResult == .success, let selected = selectedText as? String, !selected.isEmpty {
                print("  üìã –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '\(selected)'")
                
                // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π
                let setResult = AXUIElementSetAttributeValue(focusedElement as! AXUIElement, kAXSelectedTextAttribute as CFString, newText as CFString)
                
                print("  üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: \(setResult)")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞
                if setResult == .success {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã
                    var newCurrentText: CFTypeRef?
                    let verifyResult = AXUIElementCopyAttributeValue(focusedElement as! AXUIElement, kAXValueAttribute as CFString, &newCurrentText)
                    
                    if verifyResult == .success, let newText = newCurrentText as? String {
                        print("  üìã –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã: '\(newText)'")
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if newText != text {
                            print("  ‚úÖ –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Accessibility API")
                            return true
                        } else {
                            print("  ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–º–µ–Ω—ã")
                            return false
                        }
                    } else {
                        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(verifyResult))")
                        return false
                    }
                } else {
                    print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(setResult))")
                    return false
                }
            } else {
                print("  ‚ùå –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
                return false
            }
        } else {
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(getResult))")
            return false
        }
    }
} 
